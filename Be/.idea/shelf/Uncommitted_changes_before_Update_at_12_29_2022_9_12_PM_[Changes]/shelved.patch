Index: routes/products.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require('express');\r\nconst {addProduct, getAllProducts,getProductsById, deleteProduct, updateProduct,getDetailProductByProId, searchProduct,\r\n  getAllBrandsInProducts,relatedProduct,searchProductByCatId, getStatisticDay, getStatisticMonth, getStatisticYear,\r\n  getMaxQuantityPurchase, getMaxQuantityPurchaseDay, getMaxQuantityPurchaseMonth, getMaxQuantityPurchaseYear,\r\n  getMinQuantityPurchaseDay, getMinQuantityPurchaseMonth, getMinQuantityPurchaseYear\r\n} = require(\"../controllers/product\");\r\nconst router = express.Router();\r\nrouter.get('/', getAllProducts);\r\nrouter.get('/brand',getAllBrandsInProducts)\r\nrouter.post(\"/related\",relatedProduct);\r\nrouter.get('/:id',getProductsById)\r\nrouter.get('/detail/:id',getDetailProductByProId)\r\nrouter.post('/add', addProduct)\r\nrouter.post('/delete', deleteProduct)\r\nrouter.post('/update', updateProduct)\r\nrouter.post('/search/category',searchProductByCatId)\r\nrouter.post('/search',searchProduct);\r\nrouter.get('/statistic/day',getStatisticDay);\r\nrouter.get('/statistic/month',getStatisticMonth);\r\nrouter.get('/statistic/year',getStatisticYear);\r\nrouter.get('/statistic/maxquantitypurchaseday',getMaxQuantityPurchaseDay);\r\nrouter.get('/statistic/maxquantitypurchaseyear',getMaxQuantityPurchaseMonth);\r\nrouter.get('/statistic/maxquantitypurchasemonth',getMaxQuantityPurchaseYear);\r\nrouter.get('/statistic/minquantitypurchaseday',getMinQuantityPurchaseDay);\r\nrouter.get('/statistic/minquantitypurchaseyear',getMinQuantityPurchaseMonth);\r\nrouter.get('/statistic/minquantitypurchasemonth',getMinQuantityPurchaseYear);\r\nmodule.exports = router;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/products.js b/routes/products.js
--- a/routes/products.js	
+++ b/routes/products.js	
@@ -2,7 +2,7 @@
 const {addProduct, getAllProducts,getProductsById, deleteProduct, updateProduct,getDetailProductByProId, searchProduct,
   getAllBrandsInProducts,relatedProduct,searchProductByCatId, getStatisticDay, getStatisticMonth, getStatisticYear,
   getMaxQuantityPurchase, getMaxQuantityPurchaseDay, getMaxQuantityPurchaseMonth, getMaxQuantityPurchaseYear,
-  getMinQuantityPurchaseDay, getMinQuantityPurchaseMonth, getMinQuantityPurchaseYear
+  getMinQuantityPurchaseDay, getMinQuantityPurchaseMonth, getMinQuantityPurchaseYear,getTotalItemSold
 } = require("../controllers/product");
 const router = express.Router();
 router.get('/', getAllProducts);
@@ -18,6 +18,7 @@
 router.get('/statistic/day',getStatisticDay);
 router.get('/statistic/month',getStatisticMonth);
 router.get('/statistic/year',getStatisticYear);
+router.get('/statistic/soldout',getTotalItemSold);
 router.get('/statistic/maxquantitypurchaseday',getMaxQuantityPurchaseDay);
 router.get('/statistic/maxquantitypurchaseyear',getMaxQuantityPurchaseMonth);
 router.get('/statistic/maxquantitypurchasemonth',getMaxQuantityPurchaseYear);
Index: controllers/product.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const product = require('../models/product');\r\n\r\n\r\nconst category = require('../models/category');\r\nexports.getAllProducts = async (req, res) => {\r\n    try {\r\n        const products = await product.getProducts();\r\n        return res.status(200).json({\"status\": \"success\", \"data\": products});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\n\r\nexports.getProductsById = async (req, res) => {\r\n    try {\r\n        const catId = req.params.id;\r\n        const products = await product.getProductsByCatId(catId);\r\n\r\n        if (products.length === 0) {\r\n            return res.status(200).json({\"status\": \"empty\", \"data\": products});\r\n        }\r\n        return res.status(200).json({\"status\": \"success\", \"data\": products});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.searchProduct = async (req, res) => {\r\n    try {\r\n        const products = await product.searchProducts(req.body.productName);\r\n        return res.status(200).json({\"status\": \"success\", \"data\": products});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.getDetailProductByProId = async (req, res) => {\r\n    try {\r\n        const id = req.params.id;\r\n        const result = await product.getDetailProductsByProId(id);\r\n        if (result.length == 0) {\r\n            return res.status(200).json({\"status\": \"empty\", \"message\": result});\r\n        } else {\r\n            return res.status(200).json({\"status\": \"success\", \"data\": result});\r\n        }\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n\r\n}\r\n\r\nconst cloudinary = require(\"../utils/imageUpload\");\r\n// program to generate random strings\r\n\r\n// declare all characters\r\nconst characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\nfunction generateString(length) {\r\n    let result = '';\r\n    const charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexports.addProduct = async (req, res) => {\r\n    try {\r\n        const productBody = req.body;\r\n        const catName = req.body.category;\r\n        const catId = await category.getCategoryById(catName);\r\n        const random = generateString(6);\r\n        const productAdd = {\r\n            Inventory: random,\r\n            ProName: productBody.name,\r\n            Price: productBody.price,\r\n            Brand: productBody.brand,\r\n            Des: productBody.des,\r\n            ShortDes: productBody.shortDes,\r\n            StatusPro: productBody.status,\r\n            Size: productBody.size,\r\n            Color: productBody.color,\r\n            Discount: productBody.discount,\r\n            DateStart: new Date(),\r\n            TotalPrice: productBody.total,\r\n            CatId: catId.CatId\r\n        }\r\n\r\n        const productId = await product.addProduct(productAdd);\r\n        const productFinding = await product.getDetailProductsByProId(productId);\r\n        const arrayFile = req.files;\r\n        const arrayImage = [];\r\n        const imageId = [];\r\n        for (let i = 0; i < arrayFile.length; i++) {\r\n            const rs = await cloudinary.uploader.upload(arrayFile[i].path, {\r\n                folder: `shoedog/${catName}`,\r\n                public_id: `${arrayFile[i].originalname}_${arrayFile[i].filename}`,\r\n                width: 500,\r\n                height: 500,\r\n                crop: \"fill\"\r\n            })\r\n            arrayImage.push(rs.secure_url)\r\n            imageId.push(rs.public_id)\r\n        }\r\n        if (arrayImage.length > 0) {\r\n            await product.updateImageMain(productId, arrayImage[0]);\r\n            const productStr = arrayImage.join(\", \");\r\n            await product.updateArrayImage(productId, productStr);\r\n            const imageIdStr = imageId.join(\", \");\r\n            console.log(imageIdStr)\r\n            await product.updateImageId(productId, imageIdStr);\r\n        }\r\n\r\n        return res.status(200).json({\"status\": \"success\", \"data\": productFinding});\r\n    } catch (e) {\r\n        console.log(e.message)\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.deleteProduct = async (req, res) => {\r\n    try {\r\n        const id = req.body.id;\r\n        const result = await product.deleteProduct(id);\r\n        return res.status(200).json({\"status\": \"success\", \"data\": result});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.updateProduct = async (req, res) => {\r\n    try {\r\n        console.log(req.body, req.files)\r\n        const products = req.body\r\n        const ProductId = products.ProId;\r\n        const cateName = req.body.category;\r\n        const catId = await category.getCategoryById(cateName);\r\n        const initProduct = {\r\n            ProName: products.name,\r\n            Des: products.des,\r\n            ShortDes: products.shortDes,\r\n            StatusPro: products.status,\r\n            Size: products.size,\r\n            Color: products.color,\r\n            Discount: products.discount,\r\n            TotalPrice: products.total,\r\n            Price: products.price,\r\n            Brand: products.brand,\r\n            CatId: catId.CatId\r\n        }\r\n        const updateProduct = await product.updateProduct(ProductId, initProduct)\r\n        const productAfterUpdate = await product.getDetailProductsByProId(ProductId)\r\n        if (productAfterUpdate.length <= 0) return res.status(200).json({\"status\": \"empty\", \"data\": productAfterUpdate});\r\n        const catName = productAfterUpdate[0].CatName;\r\n        const imageId = await product.getImageIdByProId(ProductId)\r\n        if (imageId.length > 0) {\r\n            const arrayImageId = imageId[0].ImageId.split(\", \");\r\n            for (let i = 0; i < arrayImageId.length; i++) {\r\n                await cloudinary.uploader.destroy(arrayImageId[i])\r\n            }\r\n            const arrayFile = req.files;\r\n            const arrayImage = [];\r\n            const imageId_1 = [];\r\n            for (let i = 0; i < arrayFile.length; i++) {\r\n                const rs = await cloudinary.uploader.upload(arrayFile[i].path, {\r\n                    folder: `shoedog/${catName}`,\r\n                    public_id: `${arrayFile[i].originalname}_${arrayFile[i].filename}`,\r\n                    width: 500,\r\n                    height: 500,\r\n                    crop: \"fill\"\r\n                })\r\n                arrayImage.push(rs.secure_url)\r\n                imageId_1.push(rs.public_id)\r\n            }\r\n            if (arrayImage.length > 0) {\r\n                await product.updateImageMain(ProductId, arrayImage[0]);\r\n                const productStr = arrayImage.join(\", \");\r\n                await product.updateArrayImage(ProductId, productStr);\r\n                const imageIdStr = imageId_1.join(\", \");\r\n                await product.updateImageId(ProductId, imageIdStr);\r\n            }\r\n            return res.status(200).json({\"status\": \"success\", \"data\": updateProduct});\r\n        }else return res.status(500).json({\"status\": \"error\", \"message\": \"Can not find user\"});\r\n    } catch (e) {\r\n        console.log(e.message)\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.getAllBrandsInProducts = async (req, res) => {\r\n    try {\r\n        const brands = await product.getAllBrands();\r\n        return res.status(200).json({\"status\": \"success\", \"data\": brands});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.relatedProduct = async (req, res) => {\r\n    try {\r\n        const catId = req.body.catId;\r\n        const proId = req.body.proId;\r\n        console.log(\"dsd\",catId)\r\n        const tempProducts=await product.relatedProductByCatId(catId);\r\n\r\n        const products=tempProducts.filter(index=>index.ProId!==proId)\r\n\r\n        return res.status(200).json({\"status\": \"success\", \"data\":products});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.searchProductByCatId = async (req, res) => {\r\n    try {\r\n        const productBody = req.body;\r\n        const searchProduct = {\r\n            proName: productBody.productName,\r\n            catId: productBody.catId\r\n        }\r\n        console.log(searchProduct)\r\n        const listProduct = await product.searchProductsByCatId(searchProduct)\r\n        return res.status(200).json({\"status\": \"success\", \"data\": listProduct});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.getStatisticDay = async (req, res) => {\r\n    try {\r\n        const statistic = await product.getStatisticDay();\r\n        const data = statistic[0][0].total_cost?statistic[0][0].total_cost:null\r\n        return res.status(200).json({\"status\": \"success\", \"data\": data});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.getStatisticMonth = async (req, res) => {\r\n    try {\r\n        const statistic = await product.getStatisticMonth();\r\n        const data = statistic[0][0].total_cost?statistic[0][0].total_cost:null\r\n        return res.status(200).json({\"status\": \"success\", \"data\": data});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.getStatisticYear = async (req, res) => {\r\n    try {\r\n        const statistic = await product.getStatisticYear();\r\n        const data = statistic[0][0].total_cost?statistic[0][0].total_cost:null\r\n        return res.status(200).json({\"status\": \"success\", \"data\": data});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.getMaxQuantityPurchaseDay = async (req, res) => {\r\n    try {\r\n        const limit= req.query.limit;\r\n        const statistic = await product.getMaxQuantityPurchase(limit);\r\n        const data = statistic[0]?statistic[0]:null\r\n        return res.status(200).json({\"status\": \"success\", \"data\": data});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.getMaxQuantityPurchaseMonth = async (req, res) => {\r\n    try {\r\n        const limit= req.query.limit;\r\n        const statistic = await product.getMaxQuantityPurchaseMonth(limit);\r\n        const data = statistic[0]?statistic[0]:null\r\n        return res.status(200).json({\"status\": \"success\", \"data\": data});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.getMaxQuantityPurchaseYear = async (req, res) => {\r\n    try {\r\n        const limit= req.query.limit;\r\n        const statistic = await product.getMaxQuantityPurchaseYear(limit);\r\n        const data = statistic[0]?statistic[0]:null\r\n        return res.status(200).json({\"status\": \"success\", \"data\": data});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n\r\nexports.getMinQuantityPurchaseDay = async (req, res) => {\r\n    try {\r\n        const limit= req.query.limit;\r\n        const statistic = await product.getMinQuantityPurchaseDay(limit);\r\n        const data = statistic[0]?statistic[0]:null\r\n        return res.status(200).json({\"status\": \"success\", \"data\": data});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\nexports.getMinQuantityPurchaseMonth = async (req, res) => {\r\n    try {\r\n        const limit= req.query.limit;\r\n        const statistic = await product.getMinQuantityPurchaseMonth(limit);\r\n        const data = statistic[0]?statistic[0]:null\r\n        return res.status(200).json({\"status\": \"success\", \"data\": data});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\nexports.getMinQuantityPurchaseYear = async (req, res) => {\r\n    try {\r\n        const limit= req.query.limit;\r\n        const statistic = await product.getMinQuantityPurchaseYear(limit);\r\n        const data = statistic[0]?statistic[0]:null\r\n        return res.status(200).json({\"status\": \"success\", \"data\": data});\r\n    } catch (e) {\r\n        return res.status(500).json({\"status\": \"error\", \"message\": e.message});\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/product.js b/controllers/product.js
--- a/controllers/product.js	
+++ b/controllers/product.js	
@@ -321,3 +321,13 @@
         return res.status(500).json({"status": "error", "message": e.message});
     }
 }
+
+exports.getTotalItemSold=async (req,res)=>{
+    try {
+        const statistic = await product.getAllProductSoldout();
+        return res.status(200).json({"status": "success", "data": statistic.length});
+    } catch (e) {
+        return res.status(500).json({"status": "error", "message": e.message});
+    }
+}
+
Index: models/product.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const db = require('../utils/db');\r\n\r\n//s\r\nexports.getProducts = () => {\r\n    return db('products')\r\n}\r\n\r\nexports.getProductById = (ProId) => {\r\n    return db('products').where('ProId', ProId);\r\n}\r\n\r\nexports.addProduct = (product) => {\r\n    return db('products').insert(product);\r\n}\r\n\r\n\r\n//s\r\nexports.deleteProduct = async (id) => {\r\n    const check = db('products').where('ProId', id).del();\r\n    return check;\r\n}\r\n\r\nexports.updateProduct = (id, product) => {\r\n    return db('products').where('ProId', id).update(product);\r\n}\r\n\r\nexports.getImageIdByProId = (id) => {\r\n    return db('products').select('ImageId').where('ProId', id);\r\n}\r\n\r\nexports.updateImageMain = (id, image) => {\r\n    return db('products').where('ProId', id).update({ImageMain: image});\r\n}\r\n\r\nexports.updateArrayImage = (id, image) => {\r\n    return db('products').where('ProId', id).update({ImageArray: image});\r\n}\r\n\r\nexports.updateImageId = (id, image) => {\r\n    return db('products').where('ProId', id).update({ImageId: image});\r\n}\r\n\r\n\r\n//s\r\nexports.getProductsByCatId = (id) => {\r\n    return db('products')\r\n        .join('categories', 'products.CatId', 'categories.CatId')\r\n        .where('products.CatId', id)\r\n}\r\n\r\n\r\n//s\r\nexports.getDetailProductsByProId = (id) => {\r\n    return db(\"products\")\r\n        .join('categories', 'products.CatId', 'categories.CatId')\r\n        .where('products.ProId', id)\r\n}\r\n\r\nexports.searchProducts = async (product) => {\r\n    const sql = `select a.*, b.*\r\n                 FROM products as a\r\n                          join categories as b on a.CatId = b.CatId\r\n                 WHERE a.ProName like \"%${product}%\"\r\n    `\r\n    const raw_data = await db.raw(sql)\r\n    return raw_data[0]\r\n}\r\nexports.getAllBrands = () => {\r\n    return db(\"products\")\r\n        .distinct('Brand');\r\n}\r\n\r\nexports.searchProductsByCatId = async (product) => {\r\n    const sql = `select a.*, b.*\r\n                 FROM products as a\r\n                          join categories as b on a.CatId = b.CatId\r\n                 WHERE a.ProName like \"%${product.proName}%\"\r\n                   AND a.CatId = ${product.catId}\r\n    `\r\n    const raw_data = await db.raw(sql)\r\n    return raw_data[0]\r\n}\r\n\r\n\r\nexports.relatedProductByCatId = (catId) => {\r\n    return db(\"products\")\r\n        .join('categories', 'categories.CatId', 'products.CatId')\r\n        .where('products.CatId', catId)\r\n        .orderByRaw('RAND()')\r\n        .limit(9)\r\n}\r\n\r\nexports.updateSizeAndQuantityByProId = ({proId, size}) => {\r\n    return db(\"products\")\r\n        .where('products.ProId', proId)\r\n        .update({\r\n            Size: size\r\n        })\r\n}\r\n\r\nexports.changeStatusProDuctByProId = async (proId, statusPro) => {\r\n    return db(\"products\")\r\n        .where('products.ProId', proId)\r\n        .update({\r\n            StatusPro: statusPro\r\n        })\r\n}\r\n\r\nexports.getStatisticDay = () => {\r\n    return db.raw('select sum(o.TotalCost) as total_cost\\n' +\r\n        'from ordersdetails od join orders o on (od.OrderId=o.OrderId)\\n' +\r\n        'where DATE(o.OrderDate) = DATE(NOW())\\n')\r\n}\r\n\r\nexports.getStatisticMonth = () => {\r\n    return db.raw('select sum(o.TotalCost) as total_cost\\n' +\r\n        'from ordersdetails od join orders o on (od.OrderId=o.OrderId)\\n' +\r\n        'where MONTH(o.OrderDate) = MONTH(NOW())\\n')\r\n}\r\n\r\nexports.getStatisticYear = () => {\r\n    return db.raw('select sum(o.TotalCost) as total_cost\\n' +\r\n        'from ordersdetails od join orders o on (od.OrderId=o.OrderId)\\n' +\r\n        'where YEAR(o.OrderDate) = YEAR(NOW())\\n')\r\n}\r\n\r\nexports.getMaxQuantityPurchase = (limit) => {\r\n    return db.raw('select p.*, count(*) as \\'Amount\\'\\n' +\r\n        'from products p join ordersdetails o on p.ProId = o.ProId\\n' +\r\n        'join orders o2 on o2.OrderId = o.OrderId\\n' +\r\n        'where DAY(o2.OrderDate) = DAY(NOW())\\n' +\r\n        'group by p.ProId\\n' +\r\n        'order by Amount desc\\n' +\r\n        `limit ${limit}\\n`)\r\n}\r\n\r\nexports.getMaxQuantityPurchaseMonth = (limit) => {\r\n    return db.raw('select p.*, count(*) as \\'Amount\\'\\n' +\r\n        'from products p join ordersdetails o on p.ProId = o.ProId\\n' +\r\n        'join orders o2 on o2.OrderId = o.OrderId\\n' +\r\n        'where MONTH(o2.OrderDate) = MONTH(NOW())\\n' +\r\n        'group by p.ProId\\n' +\r\n        'order by Amount desc\\n' +\r\n        `limit ${limit}\\n`)\r\n}\r\n\r\nexports.getMaxQuantityPurchaseYear = (limit) => {\r\n    return db.raw('select p.*, count(*) as \\'Amount\\'\\n' +\r\n        'from products p join ordersdetails o on p.ProId = o.ProId\\n' +\r\n        'join orders o2 on o2.OrderId = o.OrderId\\n' +\r\n        'where YEAR(o2.OrderDate) = YEAR(NOW())\\n' +\r\n        'group by p.ProId\\n' +\r\n        'order by Amount desc\\n' +\r\n        `limit ${limit}\\n`)\r\n}\r\n\r\nexports.getMinQuantityPurchaseDay = (limit) => {\r\n    return db.raw('select p.*, count(*) as \\'Amount\\'\\n' +\r\n        'from products p join ordersdetails o on p.ProId = o.ProId\\n' +\r\n        'join orders o2 on o2.OrderId = o.OrderId\\n' +\r\n        'where DAY(o2.OrderDate) = DAY(NOW())\\n' +\r\n        'group by p.ProId\\n' +\r\n        'order by Amount asc\\n' +\r\n        `limit ${limit}\\n`)\r\n}\r\n\r\nexports.getMinQuantityPurchaseMonth = (limit) => {\r\n    return db.raw('select p.*, count(*) as \\'Amount\\'\\n' +\r\n        'from products p join ordersdetails o on p.ProId = o.ProId\\n' +\r\n        'join orders o2 on o2.OrderId = o.OrderId\\n' +\r\n        'where MONTH(o2.OrderDate) = MONTH(NOW())\\n' +\r\n        'group by p.ProId\\n' +\r\n        'order by Amount asc\\n' +\r\n        `limit ${limit}\\n`)\r\n}\r\n\r\nexports.getMinQuantityPurchaseYear = (limit) => {\r\n    return db.raw('select p.*, count(*) as \\'Amount\\'\\n' +\r\n        'from products p join ordersdetails o on p.ProId = o.ProId\\n' +\r\n        'join orders o2 on o2.OrderId = o.OrderId\\n' +\r\n        'where YEAR(o2.OrderDate) = YEAR(NOW())\\n' +\r\n        'group by p.ProId\\n' +\r\n        'order by Amount asc\\n' +\r\n        `limit ${limit}\\n`)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/product.js b/models/product.js
--- a/models/product.js	
+++ b/models/product.js	
@@ -183,3 +183,9 @@
         'order by Amount asc\n' +
         `limit ${limit}\n`)
 }
+
+exports.getAllProductSoldout = () => {
+    return db("products")
+      .join('categories', 'products.CatId', 'categories.CatId')
+      .where('products.StatusPro', 0)
+}
Index: ../admin/src/configs/url.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export const SERVER_URL=\"http://localhost:3001/\"\r\nexport const CLIENT_URL=\"http://localhost:3000/\"\r\n\r\n//Server\r\nexport const GET_CATEGORIES_URI=\"category\"\r\nexport const GET_PRODUCTS_URI=\"product\"\r\nexport const ADD_CATEGORIES_URI=\"category/add\"\r\nexport const REMOVE_PRODUCT_URI=\"product/delete\"\r\nexport const GET_BRANDS_URI=\"product/brand\"\r\nexport const ADD_NEW_PRODUCT_URI=\"product/add\"\r\nexport const EDIT_PRODUCT_URI=\"product/update\"\r\nexport const SEARCH_PRODUCT_URI=\"product/search/category\"\r\nexport const DETAIL_PRODUCT_URI=\"product/detail/\"\r\nexport const GET_ALL_ORDER_URI=\"order\"\r\nexport const REMOVE_ORDER_URI=\"order/delete\"\r\nexport const COMPLETE_ORDER_URI=\"order/complete\"\r\nexport const POST_LOGIN_URI=\"auth/login\"\r\n\r\n//Client\r\nexport const LIST_PRODUCT_BY_CATEGORY_ID=\"admin/category/\"\r\nexport const DETAIL_PRODUCT=\"/admin/category/\"\r\nexport const ADD_NEW_PRODUCT=\"/admin/product/add\"\r\nexport const EDIT_PRODUCT=\"/admin/product/edit/\"\r\nexport const ORDER_PRODUCT=\"/admin/order/process\"\r\nexport const ORDER_SUCCESS_PRODUCT=\"/admin/order/success\"\r\nexport const DASHBOARD=\"/admin\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../admin/src/configs/url.js b/../admin/src/configs/url.js
--- a/../admin/src/configs/url.js	
+++ b/../admin/src/configs/url.js	
@@ -16,6 +16,18 @@
 export const COMPLETE_ORDER_URI="order/complete"
 export const POST_LOGIN_URI="auth/login"
 
+export const GET_STATISTIC_YEAR_URI="product/statistic/year";
+export const GET_STATISTIC_DAY_URI="product/statistic/day";
+export const GET_STATISTIC_MONTH_URI="product/statistic/month";
+
+export const GET_MAX_ITEM_BUY_DAY_URI="product/statistic/maxquantitypurchaseday?limit="
+export const GET_MAX_ITEM_BUY_MONTH_URI="product/statistic/maxquantitypurchasemonth?limit="
+export const GET_MAX_ITEM_BUY_YEAR_URI="product/statistic/maxquantitypurchaseyear?limit="
+
+export const GET_MIN_ITEM_BUY_DAY_URI="product/statistic/minquantitypurchaseday?limit="
+export const GET_MIN_ITEM_BUY_MONTH_URI="product/statistic/minquantitypurchasemonth?limit="
+export const GET_MIN_ITEM_BUY_YEAR_URI="product/statistic/minquantitypurchaseyear?limit="
+export const GET_PRODUCTS_SOLD_OUT_URI="product/statistic/soldout";
 //Client
 export const LIST_PRODUCT_BY_CATEGORY_ID="admin/category/"
 export const DETAIL_PRODUCT="/admin/category/"
Index: ../admin/src/pages/home/HomePage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\n\r\nconst HomePage = () => {\r\n    return (\r\n      <>\r\n      Home page</>\r\n    )\r\n}\r\n\r\nexport default HomePage
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../admin/src/pages/home/HomePage.jsx b/../admin/src/pages/home/HomePage.jsx
--- a/../admin/src/pages/home/HomePage.jsx	
+++ b/../admin/src/pages/home/HomePage.jsx	
@@ -1,10 +1,543 @@
-
+import {useEffect, useState} from "react";
+import {
+  getListProducts,
+  getListProductSoldOut,
+  getMaxItemBuyStatisticDay, getMaxItemBuyStatisticMonth, getMaxItemBuyStatisticYear,
+  getMinItemBuyStatisticDay, getMinItemBuyStatisticMonth, getMinItemBuyStatisticYear,
+  getTotalPriceStatisticDay, getTotalPriceStatisticMonth, getTotalPriceStatisticYear
+} from "../../apis/products/ProductsApi";
+import CardRevenue from "../../components/card/CardRevenue";
+import {Select} from "antd";
+import {getAllOrders} from "../../apis/orders/OrdersApi";
 
 
 const HomePage = () => {
+    const [revenue,setRevenue]=useState(0);
+    const [minItem,setMinItem]=useState([]);
+    const [maxItem,setMaxItem]=useState([]);
+    const [countProduct,setCountProduct]=useState(0);
+    const [countOrder,setCountOrder]=useState({
+      orderSuccess:0,
+      orderProcess:0,
+    })
+    const [productsSold,setProductSold]=useState(0);
+    const [filterRevenue,setFilterRevenue]=useState(1);
+    const [filterMaxItem,setFilterMaxItem]=useState(1);
+    const [filterMinItem,setFilterMinItem]=useState(1);
+    useEffect(()=>{
+      const getListProductSold=async ()=>{
+        await getListProductSoldOut()
+          .then(res=>{
+            if(res.data.status=="success"){
+              setProductSold(res.data.data);
+            }
+          })
+      }
+
+      const countProduct=async ()=>{
+        await getListProducts()
+          .then(res=>{
+            if(res.data.status=="success"){
+              setCountProduct(res.data.data.length)
+            }
+          })
+      }
+
+      const countOrder=async ()=>{
+        await getAllOrders()
+          .then(res=>{
+          if(res.data.status=="success"){
+            setCountOrder({
+              orderSuccess: res.data.data.filter(index=>index.StatusOrder==1).length,
+              orderProcess:res.data.data.filter(index=>index.StatusOrder==0).length
+            })
+          }
+        })
+      }
+      countProduct();
+      getListProductSold();
+      countOrder();
+    },[]);
+
+
+
+    useEffect(()=>{
+      //day
+      if(filterRevenue==0){
+        const getRevenueDay=async ()=>{
+          await getTotalPriceStatisticDay()
+            .then(res=>{
+              if(res.data.status=="success"){
+                if(res.data.data==null){
+                  setRevenue(0)
+                }
+                else{
+                  setRevenue(res.data.data);
+                }
+              }
+            })
+        }
+        getRevenueDay();
+      }
+      else if(filterRevenue==1){ //month
+
+        const getRevenueMonth=async ()=>{
+          await getTotalPriceStatisticMonth()
+            .then(res=>{
+              if(res.data.status=="success"){
+                if(res.data.data==null){
+                  setRevenue(0)
+                }
+                else{
+                  setRevenue(res.data.data);
+                }
+              }
+            })
+        }
+        getRevenueMonth();
+
+      }
+      else if(filterRevenue==2){ //year
+
+        const getRevenueYear=async ()=>{
+          await getTotalPriceStatisticYear()
+            .then(res=>{
+              if(res.data.status=="success"){
+                if(res.data.data==null){
+                  setRevenue(0)
+                }
+                else{
+                  setRevenue(res.data.data);
+                }
+              }
+            })
+        }
+        getRevenueYear();
+      }
+    },[filterRevenue]);
+
+    useEffect(()=>{
+      //day
+      if(filterMinItem==0) {
+        const getMinItemDayList = async () => {
+          await getMinItemBuyStatisticDay({limit: 6})
+            .then(res => {
+              if (res.data.status == "success") {
+                setMinItem(res.data.data)
+              }
+            })
+        }
+        getMinItemDayList();
+      }
+      else if(filterMinItem==1) {
+        const getMinItemMonthList = async () => {
+          await getMinItemBuyStatisticMonth({limit: 6})
+            .then(res => {
+              if (res.data.status == "success") {
+                setMinItem(res.data.data)
+              }
+            })
+        }
+        getMinItemMonthList();
+      }
+      else if(filterMinItem==2){
+        const getMinItemYearList=async ()=>{
+          await getMinItemBuyStatisticYear({limit:6})
+            .then(res=>{
+              if(res.data.status=="success"){
+                setMinItem(res.data.data)
+              }
+            })
+        }
+        getMinItemYearList();
+      }
+    },[filterMinItem])
+
+  useEffect(()=>{
+    //day
+    if(filterMaxItem==0) {
+      const getMaxItemDayList = async () => {
+        await getMaxItemBuyStatisticDay({limit: 6})
+          .then(res => {
+            if (res.data.status == "success") {
+              setMaxItem(res.data.data)
+            }
+          })
+      }
+      getMaxItemDayList();
+    }
+    else if(filterMaxItem==1) {
+      const getMaxItemMonthList = async () => {
+        await getMaxItemBuyStatisticMonth({limit: 6})
+          .then(res => {
+            if (res.data.status == "success") {
+              setMaxItem(res.data.data)
+            }
+          })
+      }
+      getMaxItemMonthList();
+    }
+    else if(filterMaxItem==2) {
+      const getMaxItemYearList=async ()=>{
+        await getMaxItemBuyStatisticYear({limit:6})
+          .then(res=>{
+            if(res.data.status=="success"){
+              setMaxItem(res.data.data)
+            }
+          })
+      }
+      getMaxItemYearList();
+    }
+  },[filterMaxItem])
+
+    const handleMaxItem=(e)=>{
+      setFilterMaxItem(e);
+    }
+
+    const handleMinItem=(e)=>{
+      setFilterMinItem(e);
+    }
+    const handleRevenue=(e)=>{
+      setFilterRevenue(e);
+    }
     return (
-      <>
-      Home page</>
+      <article className="content dashboard-page">
+        <section className="section">
+          <div className="row sameheight-container">
+            <div className="col col-12 col-sm-12 col-md-6 col-xl-5 stats-col">
+              <div className="card sameheight-item stats" data-exclude="xs" style={{height: "250px"}}>
+                <div className="card-block">
+                  <div className="title-block">
+                    <div style={{display:"flex",justifyContent:"space-between"}}> <h4>Thống kê doanh thu</h4>
+                      <Select
+                        defaultValue={filterRevenue}
+                        style={{
+                          width: 100,
+                          alignItems:"center",
+                          textAlign:"center"
+                        }}
+                        onChange={handleRevenue}
+                        options={[
+                          {
+                            value: 0,
+                            label: 'Ngày',
+                          },
+                          {
+                            value: 1,
+                            label: 'Tháng',
+                          },
+                          {
+                            value: 2,
+                            label: 'Năm',
+                          },
+                        ]}
+                      />
+
+                    </div>
+
+                    <p className="title-description">
+                      Thống kê doanh thu cửa hàng
+                    </p>
+                  </div>
+                  <div className="row row-sm stats-container">
+
+
+                    <div className="col-12 col-sm-6  stat-col">
+                      <div className="stat-icon">
+                        <i className="fa fa-dollar"></i>
+                      </div>
+                      <div className="stat">
+                        <div className="value">{Number(revenue).toLocaleString('it-IT', {style: 'currency', currency: 'VND'})}</div>
+                        <div className="name"> Doanh thu</div>
+                      </div>
+                      <div className="progress stat-progress">
+                        <div className="progress-bar" style={{width: "100%"}}></div>
+                      </div>
+                    </div>
+                    {/* <div className="col-12 col-sm-6 stat-col">
+                      <div className="stat-icon">
+                        <i className="fa fa-rocket"></i>
+                      </div>
+                      <div className="stat">
+                        <div className="value"> {productsSold}</div>
+                        <div className="name">Số lượng sản phẩm sold out</div>
+                      </div>
+                      <div className="progress stat-progress">
+                        <div className="progress-bar" style={{width: "100%"}}></div>
+                      </div>
+                    </div>
+                    <div className="col-12 col-sm-6 stat-col">
+                      <div className="stat-icon">
+                        <i className="fa fa-shopping-cart"></i>
+                      </div>
+                      <div className="stat">
+                        <div className="value"> {countProduct}</div>
+                        <div className="name"> Số lượng sản phẩm</div>
+                      </div>
+                      <div className="progress stat-progress">
+                        <div className="progress-bar" style={{width: "100%"}}></div>
+                      </div>
+                    </div>
+                    <div className="col-12 col-sm-6  stat-col">
+                      <div className="stat-icon">
+                        <i className="fa fa-users"></i>
+                      </div>
+                      <div className="stat">
+                        <div className="value"> 359</div>
+                        <div className="name"> Total users</div>
+                      </div>
+                      <div className="progress stat-progress">
+                        <div className="progress-bar" style={{width: "100%"}}></div>
+                      </div>
+                    </div>
+                    <div className="col-12 col-sm-6  stat-col">
+                      <div className="stat-icon">
+                        <i className="fa fa-list-alt"></i>
+                      </div>
+                      <div className="stat">
+                        <div className="value"> 59</div>
+                        <div className="name"> Tickets closed</div>
+                      </div>
+                      <div className="progress stat-progress">
+                        <div className="progress-bar" style={{width: "100%"}}></div>
+                      </div>
+                    </div>
+                    <div className="col-12 col-sm-6 stat-col">
+                      <div className="stat-icon">
+                        <i className="fa fa-dollar"></i>
+                      </div>
+                      <div className="stat">
+                        <div className="value"> $780.064</div>
+                        <div className="name"> Total income</div>
+                      </div>
+                      <div className="progress stat-progress">
+                        <div className="progress-bar" style={{width: "100%"}}></div>
+                      </div>
+                    </div>*/}
+                  </div>
+                </div>
+              </div>
+            </div>
+
+
+            <div className="col col-12 col-sm-12 col-md-6 col-xl-7 history-col">
+              <div className="card sameheight-item stats" data-exclude="xs" style={{height: "250px"}}>
+                <div className="card-block">
+                  <div className="title-block">
+                    <div style={{display:"flex",justifyContent:"space-between"}}> <h4>Thống kê sản phẩm</h4>
+                    </div>
+
+                    <p className="title-description">
+                      Thống kê sản phẩm của cửa hàng
+                    </p>
+                  </div>
+                  <div className="row row-sm stats-container">
+
+                    <div className="col-12 col-sm-6 stat-col">
+                      <div className="stat-icon">
+                        <i className="fa fa-window-close-o" ></i>
+                      </div>
+                      <div className="stat">
+                        <div className="name">Số lượng sản phẩm sold out</div>
+                        <div className="value"> {productsSold}</div>
+                      </div>
+                      <div className="progress stat-progress">
+                        <div className="progress-bar" style={{width: "100%"}}></div>
+                      </div>
+                    </div>
+                    <div className="col-12 col-sm-6  stat-col">
+                      <div className="stat-icon">
+                        <i className="fa fa-list-alt"></i>
+                      </div>
+                      <div className="stat">
+                        <div className="name"> Số lượng order đang xử lý</div>
+                        <div className="value"> {countOrder?.orderProcess}</div>
+                      </div>
+                      <div className="progress stat-progress">
+                        <div className="progress-bar" style={{width: "100%"}}></div>
+                      </div>
+                    </div>
+                    <div className="col-12 col-sm-6 stat-col">
+                      <div className="stat-icon">
+                        <i className="fa fa-shopping-cart"></i>
+                      </div>
+                      <div className="stat">
+                        <div className="name"> Số lượng sản phẩm</div>
+                        <div className="value"> {countProduct}</div>
+                      </div>
+                      <div className="progress stat-progress">
+                        <div className="progress-bar" style={{width: "100%"}}></div>
+                      </div>
+                    </div>
+                    <div className="col-12 col-sm-6  stat-col">
+                      <div className="stat-icon">
+                        <i className="fa fa-list-alt"></i>
+                      </div>
+                      <div className="stat">
+                        <div className="name"> Số lượng order đã hoàn thành</div>
+                        <div className="value"> {countOrder?.orderSuccess}</div>
+                      </div>
+                      <div className="progress stat-progress">
+                        <div className="progress-bar" style={{width: "100%"}}></div>
+                      </div>
+                    </div>
+                  </div>
+                </div>
+              </div>
+            </div>
+          </div>
+        </section>
+
+
+        <section className="section">
+          <div className="row sameheight-container">
+            <div className="col-xl-12">
+              <div className="card sameheight-item items" data-exclude="xs,sm,lg" style={{height: "400.2px"}}>
+                <div className="card-header bordered">
+                  <div className="header-block">
+                    <h3 className="title">Top sản phẩm bán chạy</h3>
+                  </div>
+                  <div className="header-block pull-right">
+                    <div className="header-block pull-right">
+                      <Select
+                        defaultValue={filterMaxItem}
+                        style={{
+                          width: 100,
+                          alignItems:"center",
+                          textAlign:"center"
+                        }}
+                        onChange={handleMaxItem}
+                        options={[
+                          {
+                            value: 0,
+                            label: 'Ngày',
+                          },
+                          {
+                            value: 1,
+                            label: 'Tháng',
+                          },
+                          {
+                            value: 2,
+                            label: 'Năm',
+                          },
+                        ]}
+                      />
+                    </div>
+                  </div>
+                </div>
+                <ul className="item-list striped">
+                  <li className="item item-list-header">
+                    <div className="item-row">
+                      <div className="item-col item-col-header fixed item-col-img xs"></div>
+                      <div className="item-col item-col-header item-col-title">
+                        <div>
+                          <span>Tên sản phẩm</span>
+                        </div>
+                      </div>
+                      <div className="item-col item-col-header item-col-sales">
+                        <div>
+                          <span>Đã bán</span>
+                        </div>
+                      </div>
+
+                      <div className="item-col item-col-header item-col-stats">
+                        <div className="no-overflow">
+                          <span>Doanh thu</span>
+                        </div>
+                      </div>
+                      <div className="item-col item-col-header item-col-date">
+                        <div>
+                          <span>Tình trạng</span>
+                        </div>
+                      </div>
+                    </div>
+                  </li>
+                  {
+                    maxItem.map(index=>(
+                      <CardRevenue items={index}/>
+                    ))
+                  }
+                </ul>
+              </div>
+            </div>
+          </div>
+        </section>
+
+
+
+
+        <section className="section">
+          <div className="row sameheight-container">
+            <div className="col-xl-12">
+              <div className="card sameheight-item items" data-exclude="xs,sm,lg" style={{height: "400.2px"}}>
+                <div className="card-header bordered">
+                  <div className="header-block">
+                    <h3 className="title">Top sản phẩm bán chậm</h3>
+                  </div>
+                   <div className="header-block pull-right">
+                     <Select
+                       defaultValue={filterMinItem}
+                       style={{
+                         width: 100,
+                         alignItems:"center",
+                         textAlign:"center"
+                       }}
+                       onChange={handleMinItem}
+                       options={[
+                         {
+                           value: 0,
+                           label: 'Ngày',
+                         },
+                         {
+                           value: 1,
+                           label: 'Tháng',
+                         },
+                         {
+                           value: 2,
+                           label: 'Năm',
+                         },
+                       ]}
+                     />
+                  </div>
+                </div>
+                <ul className="item-list striped">
+                  <li className="item item-list-header">
+                    <div className="item-row">
+                      <div className="item-col item-col-header fixed item-col-img xs"></div>
+                      <div className="item-col item-col-header item-col-title">
+                        <div>
+                          <span>Tên sản phẩm</span>
+                        </div>
+                      </div>
+                      <div className="item-col item-col-header item-col-sales">
+                        <div>
+                          <span>Đã bán</span>
+                        </div>
+                      </div>
+
+                      <div className="item-col item-col-header item-col-stats">
+                        <div className="no-overflow">
+                          <span>Doanh thu</span>
+                        </div>
+                      </div>
+                      <div className="item-col item-col-header item-col-date">
+                        <div>
+                          <span>Tình trạng</span>
+                        </div>
+                      </div>
+                    </div>
+                  </li>
+                  {
+                    minItem.map(index=>(
+                      <CardRevenue items={index}/>
+                    ))
+                  }
+                </ul>
+              </div>
+            </div>
+          </div>
+        </section>
+      </article>
     )
 }
 
Index: ../admin/src/components/card/CardRevenue.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../admin/src/components/card/CardRevenue.jsx b/../admin/src/components/card/CardRevenue.jsx
new file mode 100644
--- /dev/null	
+++ b/../admin/src/components/card/CardRevenue.jsx	
@@ -0,0 +1,41 @@
+import {useNavigate} from "react-router-dom";
+import {DETAIL_PRODUCT} from "../../configs/url";
+
+
+const CardRevenue=({items})=>{
+  const navigate=useNavigate();
+  return (
+    <li className="item" onClick={()=>navigate(DETAIL_PRODUCT+items?.CatId+"/"+items?.ProId)}>
+      <div className="item-row">
+        <div className="item-col fixed item-col-img xs">
+          <a>
+            <div className="item-img xs rounded"
+                 style={{backgroundImage:`url(${items?.ImageMain})`}}></div>
+          </a>
+        </div>
+        <div className="item-col item-col-title no-overflow">
+          <div>
+            <a  className="">
+              <h4 className="item-title no-wrap"> {items?.ProName} </h4>
+            </a>
+          </div>
+        </div>
+        <div className="item-col item-col-sales">
+          <div className="item-heading">Đã bán</div>
+          <div> 4958</div>
+        </div>
+        <div className="item-col item-col-stats">
+          <div className="item-heading">Doanh thu</div>
+          <div> 21 SEP 10:45</div>
+        </div>
+        <div className="item-col item-col-date">
+          <div className="item-heading">Tình trạng</div>
+          <div> {items?.StatusPro==1?"Còn hàng":"Hết hàng"}</div>
+        </div>
+      </div>
+    </li>
+  )
+}
+
+
+export default CardRevenue
Index: ../admin/src/apis/products/ProductsApi.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import request from \"../request\";\r\nimport {\r\n  ADD_NEW_PRODUCT_URI, DETAIL_PRODUCT_URI, EDIT_PRODUCT_URI,\r\n  GET_BRANDS_URI,\r\n  GET_PRODUCTS_URI,\r\n  REMOVE_PRODUCT_URI,\r\n  SEARCH_PRODUCT_URI\r\n} from \"../../configs/url\";\r\n\r\nexport const getListProducts= async ()=>{\r\n  return await request.get(GET_PRODUCTS_URI);\r\n}\r\nexport const getListProductsByCatId=async (id)=>{\r\n  return await request.get(GET_PRODUCTS_URI+\"/\"+id);\r\n}\r\n\r\nexport const removeProductByProId=async ({proId})=>{\r\n  return await request.post(REMOVE_PRODUCT_URI,{id:proId});\r\n}\r\n\r\nexport const addProduct=async (payload)=>{\r\n /* category: payload.catName,\r\n    name: payload.proName,\r\n    des:payload.des,\r\n    shortDes:\"\",\r\n    status:1,\r\n    brand:payload.brand,\r\n    price:payload.price,\r\n    discount:payload.discount,\r\n    total:payload.totalPrice,\r\n    image:payload.image,\r\n    size:payload.size,\r\n    color:payload.color,*/\r\n  return await request.post(ADD_NEW_PRODUCT_URI,payload,{\r\n    headers:{\r\n      \"Content-Type\": \"multipart/form-data\"\r\n    }\r\n  })\r\n}\r\n\r\nexport const editProduct=async (payload)=>{\r\n    return await request.post(EDIT_PRODUCT_URI,payload,{\r\n    headers:{\r\n      \"Content-Type\": \"multipart/form-data\"\r\n    }\r\n  })\r\n}\r\n\r\nexport const getAllBrands=async ()=>{\r\n  return await request.get(GET_BRANDS_URI);\r\n}\r\n\r\n\r\nexport const searchProductsByCatId=async ({productName,catId})=>{\r\n  return await request.post(SEARCH_PRODUCT_URI,{productName:productName,catId:catId})\r\n}\r\n\r\nexport const getDetailProductByProId=async (proId)=>{\r\n  return await request.get(DETAIL_PRODUCT_URI+proId);\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../admin/src/apis/products/ProductsApi.js b/../admin/src/apis/products/ProductsApi.js
--- a/../admin/src/apis/products/ProductsApi.js	
+++ b/../admin/src/apis/products/ProductsApi.js	
@@ -1,8 +1,17 @@
 import request from "../request";
 import {
-  ADD_NEW_PRODUCT_URI, DETAIL_PRODUCT_URI, EDIT_PRODUCT_URI,
+  ADD_NEW_PRODUCT_URI,
+  DETAIL_PRODUCT_URI,
+  EDIT_PRODUCT_URI,
   GET_BRANDS_URI,
+  GET_MAX_ITEM_BUY_DAY_URI,
+  GET_MAX_ITEM_BUY_MONTH_URI,
+  GET_MAX_ITEM_BUY_YEAR_URI, GET_MIN_ITEM_BUY_DAY_URI,
+  GET_MIN_ITEM_BUY_MONTH_URI, GET_MIN_ITEM_BUY_YEAR_URI, GET_PRODUCTS_SOLD_OUT_URI,
   GET_PRODUCTS_URI,
+  GET_STATISTIC_DAY_URI,
+  GET_STATISTIC_MONTH_URI,
+  GET_STATISTIC_YEAR_URI,
   REMOVE_PRODUCT_URI,
   SEARCH_PRODUCT_URI
 } from "../../configs/url";
@@ -59,3 +68,43 @@
   return await request.get(DETAIL_PRODUCT_URI+proId);
 }
 
+
+export const getTotalPriceStatisticDay=async ()=>{
+  return await request.get(GET_STATISTIC_DAY_URI)
+}
+
+export const getTotalPriceStatisticYear=async ()=>{
+  return await request.get(GET_STATISTIC_YEAR_URI)
+}
+
+export const getTotalPriceStatisticMonth=async ()=>{
+  return await request.get(GET_STATISTIC_MONTH_URI)
+}
+
+export const getMaxItemBuyStatisticMonth=async ({limit})=>{
+  return await request.get(GET_MAX_ITEM_BUY_MONTH_URI+limit)
+}
+
+export const getMaxItemBuyStatisticDay=async ({limit})=>{
+  return await request.get(GET_MAX_ITEM_BUY_DAY_URI+limit)
+}
+export const getMaxItemBuyStatisticYear=async ({limit})=>{
+  return await request.get(GET_MAX_ITEM_BUY_YEAR_URI+limit)
+}
+
+export const getMinItemBuyStatisticMonth=async ({limit})=>{
+  return await request.get(GET_MIN_ITEM_BUY_MONTH_URI+limit)
+}
+
+export const getMinItemBuyStatisticDay=async ({limit})=>{
+  return await request.get(GET_MIN_ITEM_BUY_DAY_URI+limit)
+}
+export const getMinItemBuyStatisticYear=async ({limit})=>{
+  return await request.get(GET_MIN_ITEM_BUY_YEAR_URI+limit)
+}
+
+export const getListProductSoldOut=async ()=>{
+  return await request.get(GET_PRODUCTS_SOLD_OUT_URI);
+}
+
+
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5f1c1ba4-4b36-4d8b-a6eb-5ef1d172de60\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dataSources/eee0cfc2-7784-4a3d-972a-ad1a989c7c2e.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/dataSources/eee0cfc2-7784-4a3d-972a-ad1a989c7c2e.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../admin/src/components/aside/AsideComponent.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../admin/src/components/aside/AsideComponent.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../admin/src/configs/url.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../admin/src/configs/url.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../admin/src/pages/login/LoginPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../admin/src/pages/login/LoginPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../admin/src/pages/login/LoginPage.thunk.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../admin/src/pages/login/LoginPage.thunk.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../admin/src/routes/RoutesPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../admin/src/routes/RoutesPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../fe/package-lock.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../fe/package-lock.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../fe/package.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../fe/package.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../fe/public/index.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../fe/public/index.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../fe/src/components/header/HeaderComponent.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../fe/src/components/header/HeaderComponent.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../fe/src/components/slide/SlideComponent.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../fe/src/components/slide/SlideComponent.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../fe/src/layouts/mainlayout/MainLayout.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../fe/src/layouts/mainlayout/MainLayout.jsx\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"GOROOT\" url=\"file://$PROJECT_DIR$/../../../../../../../Program Files/Go\" />\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2GqlIxu9z4zn1AKe68ifiLMX2Oc\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"DatabaseDriversLRU\" value=\"mysql\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"database.data.extractors.current.export.id\" value=\"SQL Inserts\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\r\n    <property name=\"ts.external.directory.path\" value=\"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2021.2.3\\plugins\\JavaScriptLanguage\\jsLanguageServicesImpl\\external\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5f1c1ba4-4b36-4d8b-a6eb-5ef1d172de60\" name=\"Changes\" comment=\"\" />\r\n      <created>1667123919616</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1667123919616</updated>\r\n      <workItem from=\"1667123920877\" duration=\"38000\" />\r\n      <workItem from=\"1670052767409\" duration=\"778000\" />\r\n      <workItem from=\"1670064421958\" duration=\"2978000\" />\r\n      <workItem from=\"1670079140585\" duration=\"3819000\" />\r\n      <workItem from=\"1670129923335\" duration=\"5540000\" />\r\n      <workItem from=\"1670232746704\" duration=\"600000\" />\r\n      <workItem from=\"1670233977221\" duration=\"5080000\" />\r\n      <workItem from=\"1670334091602\" duration=\"25000\" />\r\n      <workItem from=\"1670579501803\" duration=\"3708000\" />\r\n      <workItem from=\"1670658163975\" duration=\"13972000\" />\r\n      <workItem from=\"1670747674048\" duration=\"3196000\" />\r\n      <workItem from=\"1670829895514\" duration=\"1957000\" />\r\n      <workItem from=\"1670915628429\" duration=\"2980000\" />\r\n      <workItem from=\"1670918660766\" duration=\"5458000\" />\r\n      <workItem from=\"1670936262103\" duration=\"5710000\" />\r\n      <workItem from=\"1671001985240\" duration=\"23866000\" />\r\n      <workItem from=\"1671101920026\" duration=\"10852000\" />\r\n      <workItem from=\"1671181947940\" duration=\"3722000\" />\r\n      <workItem from=\"1671263914311\" duration=\"15583000\" />\r\n      <workItem from=\"1671362718046\" duration=\"11943000\" />\r\n      <workItem from=\"1671444893847\" duration=\"14605000\" />\r\n      <workItem from=\"1671474151152\" duration=\"607000\" />\r\n      <workItem from=\"1671510095256\" duration=\"2688000\" />\r\n      <workItem from=\"1671631380632\" duration=\"9402000\" />\r\n      <workItem from=\"1671695411180\" duration=\"3265000\" />\r\n      <workItem from=\"1671957486402\" duration=\"5718000\" />\r\n      <workItem from=\"1672032935975\" duration=\"5967000\" />\r\n      <workItem from=\"1672052007474\" duration=\"2432000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VgoProject\">\r\n    <settings-migrated>true</settings-migrated>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,19 +5,14 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="5f1c1ba4-4b36-4d8b-a6eb-5ef1d172de60" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.idea/dataSources/eee0cfc2-7784-4a3d-972a-ad1a989c7c2e.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources/eee0cfc2-7784-4a3d-972a-ad1a989c7c2e.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/../admin/src/components/card/CardRevenue.jsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../admin/src/components/aside/AsideComponent.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/../admin/src/components/aside/AsideComponent.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/controllers/product.js" beforeDir="false" afterPath="$PROJECT_DIR$/controllers/product.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/models/product.js" beforeDir="false" afterPath="$PROJECT_DIR$/models/product.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/routes/products.js" beforeDir="false" afterPath="$PROJECT_DIR$/routes/products.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../admin/src/apis/products/ProductsApi.js" beforeDir="false" afterPath="$PROJECT_DIR$/../admin/src/apis/products/ProductsApi.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../admin/src/configs/url.js" beforeDir="false" afterPath="$PROJECT_DIR$/../admin/src/configs/url.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../admin/src/pages/login/LoginPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/../admin/src/pages/login/LoginPage.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../admin/src/pages/login/LoginPage.thunk.js" beforeDir="false" afterPath="$PROJECT_DIR$/../admin/src/pages/login/LoginPage.thunk.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../admin/src/routes/RoutesPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/../admin/src/routes/RoutesPage.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../fe/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/../fe/package-lock.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../fe/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/../fe/package.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../fe/public/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/../fe/public/index.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../fe/src/components/header/HeaderComponent.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/../fe/src/components/header/HeaderComponent.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../fe/src/components/slide/SlideComponent.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/../fe/src/components/slide/SlideComponent.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../fe/src/layouts/mainlayout/MainLayout.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/../fe/src/layouts/mainlayout/MainLayout.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../admin/src/pages/home/HomePage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/../admin/src/pages/home/HomePage.jsx" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -43,7 +38,7 @@
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
     <property name="database.data.extractors.current.export.id" value="SQL Inserts" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/../admin" />
     <property name="nodejs_package_manager_path" value="npm" />
     <property name="ts.external.directory.path" value="C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\plugins\JavaScriptLanguage\jsLanguageServicesImpl\external" />
   </component>
@@ -82,7 +77,11 @@
       <workItem from="1671695411180" duration="3265000" />
       <workItem from="1671957486402" duration="5718000" />
       <workItem from="1672032935975" duration="5967000" />
-      <workItem from="1672052007474" duration="2432000" />
+      <workItem from="1672052007474" duration="6708000" />
+      <workItem from="1672075110857" duration="594000" />
+      <workItem from="1672139341925" duration="7473000" />
+      <workItem from="1672206119801" duration="1782000" />
+      <workItem from="1672320266496" duration="968000" />
     </task>
     <servers />
   </component>
